- Solution #1
using System;
class Program
{
    public static void Main()
    {
        Console.WriteLine("Welcome to Main method.");
        Main1();
        Console.ReadKey();
    }
    public static void Main1()
    {
        Console.WriteLine("Welcome to Main1 method.");
    }
}
------------
- Solution #2
using System;
class Program
{
    public static void Main()
    {
        Console.WriteLine("Enter First Name");
        string firstName=Console.ReadLine();
        Console.WriteLine("Enter Last Name");
        string lastName = Console.ReadLine();
        Console.WriteLine("Welcome " + firstName + " " + lastName);
        Console.WriteLine("Welcome {0} {1}", firstName, lastName);
        Console.ReadKey();
    }
}
-------------
- Solution #3
using System;
class Program
{
    public static void Main()
    {
        Console.WriteLine("Min Value is : {0}", int.MinValue);
        Console.WriteLine("Max Value is : {0}", int.MaxValue);

        Console.WriteLine("Min Value is : {0}", float.MinValue);
        Console.WriteLine("Max Value is : {0}", float.MaxValue);

        Console.WriteLine("Min Value is : {0}", double.MinValue);
        Console.WriteLine("Max Value is : {0}", double.MaxValue);
        Console.ReadKey();
    }
}
------------------
- Solution #4
using System;
class Program
{
    public static void Main()
    {
        Console.WriteLine("\"Kumar Saurav\"");
        Console.ReadKey();
    }
}
------------------
- Solution #5
using System;
class Program
{
    public static void Main()
    {
        Console.WriteLine("One \n Two \n  Three");
        Console.ReadKey();
    }
}
-------------------
- Solution #6
using System;
class Program
{
    public static void Main()
    {
        Console.WriteLine("Kudvenkat\\C#Videos\\Video1.mp4");
        Console.ReadKey();
    }
}
--------------------
- Solution #7
using System;
class Program
{
    public static void Main()
    {
        string path = @"Kudvenkat\C#Videos\Video1.mp4";
        Console.WriteLine(path);
        Console.ReadKey();
    }
}
-----------------------
- Solution #8
    public static void Main()
    {
        int Number = 20;
        bool IsNumber10;

        if (Number == 10)
        {
            IsNumber10 = true;
        }
        else
        {
            IsNumber10 = false;
        }
        Console.WriteLine("Number == 10 is {0}", IsNumber10);
        Console.ReadKey();
    }
----------------------------
- Solution #9
     public static void Main()
    {
        int Number = 10;
        bool IsNumber10;

        IsNumber10 = Number == 10 ? true : false;
        Console.WriteLine("Number == 10 is {0}", IsNumber10);
        Console.ReadKey();
    }
------------------------------------
- Solution #10
    public static void Main()
    {
        bool? AreYouMajor = null;
        if (AreYouMajor == true)
        {
            Console.WriteLine("User is Major");
        }
        else if(AreYouMajor==false)
        {
            Console.WriteLine("User is not Major");
        }
        else
        {
            Console.WriteLine("User didn't answered that.");
        }
        Console.ReadKey();
    }

---------------------------------------
- Solution 11
    public static void Main()
    {
        int? TicketOnSale = null;
        int AvailableTickets;

        if (TicketOnSale == null)
        {
            AvailableTickets = 0;
        }
        else
        {
            AvailableTickets = TicketOnSale.Value;
        }
        Console.WriteLine("Available Tickets : {0}", AvailableTickets);
        Console.ReadKey();
    }
----------------------------------------
- Solution 12
    public static void Main()
    {
        int? TicketOnSale = 20;
        int AvailableTickets;

        AvailableTickets = TicketOnSale ?? 0;
        Console.WriteLine("Available Tickets : {0}", AvailableTickets);
        Console.ReadKey();
    }
------------------------------------------
- Solution 13
    public static void Main()
    {
        int i = 100;
        float f;
        f = i;
        Console.WriteLine("The value of float value is : {0}", f);
        Console.ReadKey();
    }
-----------------------------------------
- Solution 14
    public static void Main()
    {
        float f = 25.235f;
        int i;
        i = (int)f;
        //i = Convert.ToInt32(f);
        Console.WriteLine("The value on integer value is {0}", i);
        Console.ReadKey();
    }
-----------------------------------------
- Solution 15
    public static void Main()
    {
        string strNumber = "123";
        int i = int.Parse(strNumber);
        Console.WriteLine("Parsed value of string is :{0}",i);
        Console.ReadKey();
    }

----------------------------------------
- Solution 16
    public static void Main()
    {
        string strNumber = "123b";
        int i;
        bool validNumber= int.TryParse(strNumber, out i);
        if (validNumber)
        {
            Console.WriteLine("Converted string integer value is {0}", i);
        }
        else
        {
            Console.WriteLine("The string provided is not a valid number");
        }
        Console.ReadKey();
    }
----------------------------------------------
- Solution 17
    public static void Main()
    {
        int[] EvenNumbers = new int[3];
        EvenNumbers[0] = 0;
        EvenNumbers[1] = 2;
        EvenNumbers[2] = 4;
        Console.WriteLine("Second Even Number is : {0}", EvenNumbers[1]);
        Console.ReadKey();
    }
----------------------------------------------
- Solution 18
using System;
class Program
{
    public static void Main()
    {
        MyClass mc = new MyClass();
    }
}
/// <summary>
/// This is MyClass documentation
/// </summary>
public class MyClass
{
    
}
----------------------------------------------
- Solution 19
    public static void Main()
    {
        Console.WriteLine("Please Enter a number between 1 and 3");
        int UserNumber = int.Parse(Console.ReadLine());
        if (UserNumber == 1)
        {
            Console.WriteLine("You have Entered One");
        }
        else if(UserNumber == 2)
        {
            Console.WriteLine("You have Entered Two");
        }
        else if (UserNumber == 3)
        {
            Console.WriteLine("You have Entered Three");
        }
        else
        {
            Console.WriteLine("You have not entered a number between 1 and 3");
        }
        Console.ReadKey();
    }
----------------------------------------------------
- Solution 20
    public static void Main()
    {
        Console.WriteLine("Please Enter a number.");
        int Number=Convert.ToInt32(Console.ReadLine());
        if (Number == 10)
        {
            Console.WriteLine("You have entered 10");
        }
        else if (Number == 20)
        {
            Console.WriteLine("You have entered 20");
        }
        else if (Number == 30)
        {
            Console.WriteLine("You have entered 30");
        }
        else
        {
            Console.WriteLine("You have neither entered 10 nor 20 nor 30.");
        }
        Console.ReadKey();
    }
-----------------------------------------------------
- Solution 21
    public static void Main()
    {
        Console.WriteLine("Please Enter a Number");
        int Number = int.Parse(Console.ReadLine());
        switch (Number)
        {
            case 10:
                Console.WriteLine("You have Entered 10");
                break;
            case 20:
                Console.WriteLine("You have Entered 20");
                break;
            case 30:
                Console.WriteLine("You have Entered 30");
                break;
            default :
                Console.WriteLine("You have neither entered 10 nor 20 nor 30");
                break;
        }
        Console.ReadKey();  
    }
---------------------------------------------------
- Solution 22
    public static void Main()
    {
        Console.WriteLine("Please Enter a Number");
        int Number = int.Parse(Console.ReadLine());
        switch (Number)
        {
            case 10:
            case 20:
            case 30:
                Console.WriteLine("You have Entered {0}",Number);
                break;
            default :
                Console.WriteLine("You have neither entered 10 nor 20 nor 30");
                break;
        }
        Console.ReadKey();  
    }
-------------------------------------------------------
- Solution 23
    public static void Main()
    {
        int TotalCoffeeCost = 0;
        Console.WriteLine("Which type of coffee do you want?");
        Console.WriteLine("1-Small , 2-Medium , 3-Large");
        int UserChoice=int.Parse(Console.ReadLine());
        switch (UserChoice)
        {
            case 1:
                TotalCoffeeCost += 1;
                break;
            case 2:
                TotalCoffeeCost += 2;
                break;
            case 3:
                TotalCoffeeCost += 3;
                break;
            default:
                Console.WriteLine("Your choice {0} is invalid.",UserChoice);
                break;                
        }
        Console.WriteLine("Thank you for shopping with us.");
        Console.WriteLine("Your bill amount is : {0}", TotalCoffeeCost);
        Console.ReadKey();
    }
----------------------------------------------
- Solution 24
public static void Main()
    {
        int TotalCoffeeCost = 0;
        Start:
        Console.WriteLine("Please Enter Coffee Size");
        Console.WriteLine("1 - Small , 2 - Medium , 3 - Large");
        int CoffeeSize=int.Parse(Console.ReadLine());
        switch (CoffeeSize)
        {
            case 1:
                TotalCoffeeCost = TotalCoffeeCost + 1;
                break;
            case 2:
                TotalCoffeeCost += 2;
                break;
            case 3:
                TotalCoffeeCost += 3;
                break;
            default:
                Console.WriteLine("Your Choice {0} is invalid", CoffeeSize);
                goto Start;
        }
        Console.WriteLine("Do you want to buy another coffee? Yes/No");
        string UserChoice= Console.ReadLine();
        UserDecesion:
        switch (UserChoice.ToUpper())
        {
            case "YES":
                goto Start;
            case "NO":
                break;
            default:
                Console.WriteLine("You choice {0} is invalid", UserChoice);
                goto UserDecesion;
        }

        Console.WriteLine("Thank You For Shopping With Us.");
        Console.WriteLine("Your Total bill amount is : {0}", TotalCoffeeCost);
        Console.ReadKey();
    }
--------------------------------------------------------------
Solution 25
    public static void Main()
    {
        Console.WriteLine("Please Enter Your target number.");
        int Target = int.Parse(Console.ReadLine());
        int Start = 0;
        while (Start <= Target)
        {
            Console.Write(Start+" ");
            Start += 2;
        }
        Console.ReadKey();
    }
------------------------------------------------------------
Solution 26
    public static void Main()
    {
        string UserChoice = String.Empty;
        do
        {
            Console.WriteLine("Please Enter Your target number.");
            int Target = int.Parse(Console.ReadLine());
            int Start = 0;
            while (Start <= Target)
            {
                Console.Write(Start + " ");
                Start += 2;
            }
            Console.WriteLine("");
            do
            {
                Console.WriteLine("Do you want to continue? Yes/No");
                UserChoice = Console.ReadLine().ToUpper();
                if (UserChoice != "YES" && UserChoice != "NO")
                {
                    Console.WriteLine("Invalid Choice. Please Enter Yes/No");
                }
            } while (UserChoice != "YES" && UserChoice != "NO");
            
        } while (UserChoice == "YES");
        Console.ReadKey();
    }
--------------------------------------------------------------
Solution 27
using System;
class Program
{
    public static void Main()
    {
        int TotalCoffeeCost = 0;
        int CoffeeSize = 0;
        string Desesion = String.Empty;
        do
        {
            do
            {
                Console.WriteLine("Select your coffee size. 1-Small, 2-Medium, 3-Large");
                CoffeeSize = int.Parse(Console.ReadLine());
                if (CoffeeSize != 1 && CoffeeSize != 2 && CoffeeSize != 3)
                {
                    Console.WriteLine("Invalid Coffee Size - {0}. Please Enter a valid size.", CoffeeSize);
                }
            } while (CoffeeSize != 1 && CoffeeSize != 2 && CoffeeSize != 3);
            if (CoffeeSize == 1)
            {
                TotalCoffeeCost += 1;
            }
            else if (CoffeeSize == 2)
            {
                TotalCoffeeCost += 2;
            }
            else if (CoffeeSize == 3)
            {
                TotalCoffeeCost += 3;
            }
            do {
                Console.WriteLine("Do you want another coffee? Yes/No");
                Desesion = Console.ReadLine().ToUpper();
                if (Desesion != "YES" && Desesion != "NO")
                {
                    Console.WriteLine("Invalid Decision {0}. Please enter Yes/No", Desesion);
                }
            }while(Desesion != "YES" && Desesion != "NO");        
        } while (Desesion == "YES");
        Console.WriteLine("Thank you for shopping with us.");
        Console.WriteLine("Your total bill amount is : {0}", TotalCoffeeCost);
        Console.ReadKey();
    }
}
----------------------------------------------------------------
Solution 28
    public static void Main()
    {
        int[] Numbers = new int[3];
        Numbers[0] = 101;
        Numbers[1] = 102;
        Numbers[2] = 103;
        int start = 0;
        while (start < Numbers.Length)
        {
            Console.WriteLine(Numbers[start]);
            start += 1;
        }
        Console.ReadKey();
    } 

-------------------------------------------------------------------
Solution 29
    public static void Main()
    {
        int[] Numbers = new int[3];
        Numbers[0] = 101;
        Numbers[1] = 102;
        Numbers[2] = 103;
        for(int start = 0; start < Numbers.Length; start++)
        {
            Console.WriteLine(Numbers[start]);
        }
        Console.ReadKey();
    }
-----------------------------------------------------
Solution 30
    public static void Main()
    {
        int[] Numbers = new int[3];
        Numbers[0] = 101;
        Numbers[1] = 102;
        Numbers[2] = 103;
        foreach(int start in Numbers)
        {
            Console.WriteLine(start);
        }
        Console.ReadKey();
    }
-------------------------------------------------------
Solution 31
    public static void Main()
    {
        for(int i = 1; i <= 20; i++)
        {
            if (i > 10)
            {
                break;
            }
            Console.WriteLine(i);
        }
        Console.ReadKey();
    }
-------------------------------------------------------
Solution 32
    public static void Main()
    {
        for(int i = 1; i <= 20; i++)
        {
            if (i % 2==1)
            {
                continue;
            }
            Console.WriteLine(i);
        }
        Console.ReadKey();
    }
---------------------------------------------------
Solution 33
class Program
{
public static void Main()
    {
        Program p = new Program();
        p.EvenNumbers();
    }

    public void EvenNumbers()
    {
        int Start = 0;
        while (Start <= 20)
        {
            Console.WriteLine(Start);
            Start += 2;
        }
        Console.ReadKey();
    }
}
-------------------------------------
Solution 34
class Program
{
    public static void Main()
    {
        Program.EvenNumbers();
    }
    public static void EvenNumbers()
    {
        int Start = 0;
        while(Start <= 20)
        {
            Console.WriteLine(Start);
            Start += 2;
        }
        Console.ReadLine();
    }
}
------------------------------------------------
Solution 35
    public static void Main()
    {
        Program p = new Program();
        int Result = p.Sum(4, 6);
        Console.WriteLine("Sum of the two numbers is : {0}", Result);
        Console.ReadKey();
    }
    public int Sum(int FN,int SN)
    {
        return FN + SN;
    }
------------------------------------------------
Solution 36
class Program
{
    public static void SimpleMethod(int i)
    {
        i = 101;
    }

    public static void Main()
    {
        int i = 0;
        Program.SimpleMethod(i);
        Console.WriteLine(i);
        Console.ReadKey();
    }
}
---------------------------------------------------
Solution 37
class Program
{
    public static void SimpleMethod(ref int i)
    {
        i = 101;
    }

    public static void Main()
    {
        int i = 0;
        Program.SimpleMethod(ref i);
        Console.WriteLine(i);
        Console.ReadKey();
    }
}
---------------------------------------------------
Solution 38 
class Program
{
    public static void Calculate(int FN,int SN, out int Sum,out int Product)
    {
        Sum = FN + SN;
        Product = FN * SN;
    }

    public static void Main()
    {
        int Total = 0;
        int Product = 0;
        Program.Calculate(10, 20, out Total, out Product);
        Console.WriteLine("Sum is {0} && Product is {1}. ", Total, Product);
        Console.ReadKey();
    }
}
------------------------------------------------------
Solution 39
class Program
{
    public static void ParamsMethod(params int[] Numbers)
    {
        Console.WriteLine("The size of the array is {0}", Numbers.Length);
        foreach(int n in Numbers)
        {
            Console.WriteLine(n);
        }
    }
    public static void Main()
    {
        int[] Nums = new int[3];
        Nums[0] = 101;
        Nums[1] = 102;
        Nums[2] = 103;
        Program.ParamsMethod();
        Program.ParamsMethod(Nums);
        Program.ParamsMethod(1, 2, 3,4);

        Console.ReadKey();
    }
}
---------------------------------------------------------
Solution 40
class Program
{
    public static void Main()
    {
        ProjectA.TeamA.ClassA.Print();
        ProjectA.TeamB.ClassA.Print();
        Console.ReadKey();
    }
}
namespace ProjectA
{
    namespace TeamA
    {
        class ClassA
        {
            public static void Print()
            {
                Console.WriteLine("Print method of ProjectA TeamA");
            }
        }
    }
}
namespace ProjectA
{
    namespace TeamB
    {
        class ClassA
        {
            public static void Print()
            {
                Console.WriteLine("Print method of ProjectA TeamB");
            }
        }
    }
}
---------------------------------------------------------
Solution 41
using PATA = ProjectA.TeamA;
using PATB = ProjectA.TeamB;

class Program
{
    public static void Main()
    {
        PATA.ClassA.Print();
        PATB.ClassA.Print();
        Console.ReadKey();
    }
}
namespace ProjectA
{
    namespace TeamA
    {
        class ClassA
        {
            public static void Print()
            {
                Console.WriteLine("Print method of ProjectA TeamA");
            }
        }
    }
}
namespace ProjectA
{
    namespace TeamB
    {
        class ClassA
        {
            public static void Print()
            {
                Console.WriteLine("Print method of ProjectA TeamB");
            }
        }
    }
}
-----------------------------------------
Solution 42
class Customer
{
    string _firstName;
    string _lastName;

    public Customer(string FN,string LN)
    {
        _firstName = FN;
        _lastName = LN;
    }
    public void PrintFullName()
    {
        Console.WriteLine("Hello {0} {1}", _firstName, _lastName);
    }
}
class Program
{
    public static void Main()
    {
        Customer C1 = new Customer("Kumar", "Saurav");
        C1.PrintFullName();
        Customer C2 = new Customer("Rohan", "Jaiswal");
        C2.PrintFullName();
        Console.ReadKey();
    }
}
----------------------------------------------
Solution 43
class Customer
{
    string _firstName="";
    string _lastName="";

    public Customer()
        :this("No FirstName","No LastName")
    { }
    public Customer(string FN, string LN)
    {
        _firstName = FN;
        _lastName = LN;
    }
    public void PrintFullName()
    {
        Console.WriteLine("Hello {0} {1}", _firstName, _lastName);
    }
}
class Program
{
    public static void Main()
    {
        Customer C1 = new Customer("Kumar", "Saurav");
        C1.PrintFullName();
        Customer C2 = new Customer();
        C2.PrintFullName();
        Console.ReadKey();
    }
}
-----------------------------------------------------
Solution 44
class Circle
{
    int _Radius;
    static float _PI = 3.14F;

    public Circle(int Radius)
    {
        _Radius = Radius;
    }
    public float CalculateArea()
    {
        return Circle._PI * this._Radius * this._Radius;
    }
}

class Program
{
    public static void Main()
    {
        Circle C1 = new Circle(5);
        float Area = C1.CalculateArea();
        Console.WriteLine("Area of the circle is {0}", Area);
        Console.ReadKey();
    }
}
--------------------------------------------------
Solution 45
class Circle
{
    int _Radius;
    static float _PI;

    static Circle()
    {
        Console.WriteLine("Static constructor called.");
        _PI = 3.14F;
    }
    public Circle(int Radius)
    {
        Console.WriteLine("Normal constructor called.");
        _Radius = Radius;
    }
    public float CalculateArea()
    {
        return Circle._PI * this._Radius * this._Radius;
    }
}

class Program
{
    public static void Main()
    {
        Circle C1 = new Circle(5);
        float Area = C1.CalculateArea();
        Console.WriteLine("Area of the circle is {0}", Area);
        Console.ReadKey();
    }
}

-----------------------------------------------
Solution 46
class Employee
{
    public string FirstName;
    public string LastName;
    public string Email;
    public void PrintFullName()
    {
        Console.WriteLine("Hello {0} {1}. ", FirstName ,LastName);
    }
}
class FullTimeEmployeee:Employee
{
    public int YearlySalary;
}
class PartTimeEmployee:Employee
{
    public int HourlyRate;
}
class Program
{
    public static void Main()
    {
        FullTimeEmployeee fte = new FullTimeEmployeee();
        fte.FirstName = "Kumar";
        fte.LastName = "Saurav";
        fte.YearlySalary = 400000;
        fte.PrintFullName();
        PartTimeEmployee pte = new PartTimeEmployee();
        pte.FirstName = "Part";
        pte.LastName = "Time";
        pte.HourlyRate = 500;
        pte.PrintFullName();
        Console.ReadKey();
    }
}
--------------------------
Solution 47
public class ParentClass
{
    public ParentClass()
    {
        Console.WriteLine("Parent Class Constructor");
    }
}
public class ChildClass:ParentClass
{
    public ChildClass()
    {
        Console.WriteLine("Child Class Constructor");
    }
}
public class Program
{
    public static void Main() {
        ChildClass CC = new ChildClass();
        Console.ReadKey();
    }

}

-------------------------------------
Solution 48
public class ParentClass
{
    public ParentClass()
    {
        Console.WriteLine("Parent Class Constructor");
    }
    public ParentClass(string Message)
    {
        Console.WriteLine(Message);
    }
}
public class ChildClass:ParentClass
{
    public ChildClass():base("Child Class controlling Base Class")
    {
        Console.WriteLine("Child Class Constructor");
    }
}
public class Program
{
    public static void Main() {
        ChildClass CC = new ChildClass();
        Console.ReadKey();
    }

}
--------------------------------------------------
Solution 49
using System;
public class Employee
{
    public string FirstName="FN";
    public string LastName="LN";
    public void PrintFullName()
    {
        Console.WriteLine("Hello {0} {1}.", FirstName, LastName);
    }
}
public class PartTimeEmployee:Employee
{
    public new void PrintFullName()
    {
        //base.PrintFullName();
        Console.WriteLine("Hello {0} {1} - Contractor", FirstName, LastName);
    }
}
class Program
{
    public static void Main()
    {
        PartTimeEmployee PTE = new PartTimeEmployee();
        //PTE.PrintFullName();
        //((Employee)PTE).PrintFullName();
        Employee E = new PartTimeEmployee();
        E.PrintFullName();
        Console.ReadKey();
    }
}
-----------------------------------------------
Solution 50
using System;
public class Employee
{
    public string FirstName = "FN";
    public string LastName = "LN";
    public virtual void PrintFullName()
    {
        Console.WriteLine("Hello {0} {1}.", FirstName, LastName);
    }
}
public class FullTimeEmployee : Employee
{
    public override void PrintFullName()
    {
        Console.WriteLine("Hello {0} {1}. - Full Time Employee", FirstName, LastName);
    }
}
public class PartTimeEmployee : Employee
{
    public override void PrintFullName()
    {
        Console.WriteLine("Hello {0} {1}. - Part Time Employee", FirstName, LastName);
    }
}
public class TemploraryEmployee : Employee
{
    public override void PrintFullName()
    {
        Console.WriteLine("Hello {0} {1}. - Temporary Employee", FirstName, LastName);
    }
}

public class Program
{
    public static void Main()
    {
        Employee[] employees =new Employee[3];
        employees[0] = new PartTimeEmployee();
        employees[1] = new FullTimeEmployee();
        employees[2] = new TemploraryEmployee();
        foreach(Employee e in employees)
        {
            e.PrintFullName();
        }
        Console.ReadKey();
    }

}
-----------------------------------------
Solution 51
using System;
class BaseClass
{
    public virtual void Print()
    {
        Console.WriteLine("Base Class Print Method");
    }
}
class DerivedClass : BaseClass
{
    //For Method ovverriding
    //public new void Print()

    //For Method hiding
    public new void Print()
    {
        Console.WriteLine("Derived Class Print Method");
    }
}
class Program
{
    public static void Main()
    {
        BaseClass BC = new DerivedClass();
        BC.Print();
        Console.ReadKey();
    }
}
-------------------------------------
Solution 52
using System;
class Program
{
    public void Add(int FN,int SN)
    {
        int Sum = FN + SN;
        Console.WriteLine("The sum of {0} and {1} is : {2}", FN, SN, Sum);
    }
    public void Add(float FN, float SN)
    {
        float Sum = FN + SN;
        Console.WriteLine("The sum of {0} and {1} is : {2}", FN, SN, Sum);
    }
    public void Add(int FN, int SN,out int Sum)
    {
        Sum = FN + SN;
        Console.WriteLine("The sum of {0} and {1} is : {2}", FN, SN, Sum);
    }
    public static void Main()
    {
        Program P = new Program();
        P.Add(10, 20);
        P.Add(10.3F, 20.5F);
        int Sm;
        P.Add(20, 30, out Sm);
        Console.ReadKey();
    }
}
--------------------------------------
Solution 53
using System;
class Student
{
    public int Id;
    public string Name;
    public int PassMarks=30;
    public void Print()
    {
        Console.WriteLine("Student Details : Id={0}, Name={1}, PassMarks={2}", Id, Name, PassMarks);
    }
}
class Program
{
    public static void Main()
    {
        Student S = new Student();
        S.Id = -101;
        S.Name = null;
        S.PassMarks = 0;
        S.Print();
        Console.ReadKey();
    }
}
----------------------------------------
Solution 54
using System;
class Student
{
    private int _Id;
    private string _Name;
    private int _PassMarks=30;

    public void SetId(int Id)
    {
        if(Id<=0){
            throw new Exception("Id should be greater than 0");            
        }
        else
        {
            this._Id = Id;
        }
    }
    public int GetId()
    {
        return this._Id;
    }

    public void SetName(string Name)
    {
        if (string.IsNullOrEmpty(Name))
        {
            throw new Exception("Name cant be null value.");
        }
        else
        {
            this._Name = Name;
        }
    }

    public string GetName()
    {
        return string.IsNullOrEmpty(this._Name) ? "No Name" : this._Name;
    }
    public int GetPassMarks()
    {
        return this._PassMarks;
    }
    public void Print()
    {
        Console.WriteLine("Student Details : Id={0}, Name={1}, PassMarks={2}", GetId(), GetName(), GetPassMarks());
    }
}
class Program
{
    public static void Main()
    {
        Student S = new Student();
        S.SetId(101);
        S.SetName("Kumar");
        S.Print();
        Console.ReadKey();
    }
}
-----------------------------------------------------------
Solution 55
using System;
class Student
{
    private int _Id;
    private string _Name;
    private int _PassMarks=30;
    public int Id
    {
        get
        {
            return this._Id;
        }
        set
        {
            if (value <= 0)
            {
                throw new Exception("Id should be greater than 0");
            }
            else
            {
                this._Id = value;
            }
        }
     }

    public string Name
    {
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                throw new Exception("Name cant be null value.");
            }
            else
            {
                this._Name = value;
            }
        }
        get
        {
            return string.IsNullOrEmpty(this._Name) ? "No Name" : this._Name;
        }
        
    }
    public int PassMarks
    {
        get
        {
            return this._PassMarks;
        }
        
    }
    public void Print()
    {
        Console.WriteLine("Student Details : Id={0}, Name={1}, PassMarks={2}", Id, Name, PassMarks);
    }
}
class Program
{
    public static void Main()
    {
        Student S = new Student();
        S.Id=101;
        S.Name="Kumar";
        S.Print();
        Console.ReadKey();
    }
}
-------------------------------------
Solution 56
public struct Customer
{
    private int _Id;
    private string _Name;

    public int Id
    {
        get { return this._Id; }
        set { this._Id = value; }
    }
    public string Name
    {
        get { return this._Name; }
        set { this._Name = value; }
    }
    public Customer(int Id,string Name)
    {
        this._Id = Id;
        this._Name = Name;
    }
    public void PrintDetails()
    {
        Console.WriteLine("Student Id is : {0} && Name is : {1}", this._Id, this._Name);
    }
}
public class Program
{
    public static void Main()
    {
        Customer C1 = new Customer(101, "Kumar");
        C1.PrintDetails();

        Customer C2 = new Customer();
        C2.Id = 102;
        C2.Name = "Sam";
        C2.PrintDetails();

        Customer C3 = new Customer
        {
            Id = 103,
            Name = "Tom"
        };
        C3.PrintDetails();
        Console.ReadKey();
    }
}
-------------------------------------------
Solution 57 
public class Customer
{
    public int Id{ get; set; }
    public string Name { get; set; }
}
public class Program
{
    public static void Main()
    {
        Customer C1 = new Customer();
        C1.Name = "Kumar";
        Customer C2 = C1;
        C2.Name = "Saurav";
        Console.WriteLine("Value of C1.Name : {0} && Value of C2.Name : {1}", C1.Name, C2.Name);
        Console.ReadKey();

    }
}
-------------------------------------------------
Solution 58
using System;
interface ICustomer
{
    void Print();
}
public class Customer : ICustomer
{
    public void Print()
    {
        Console.WriteLine("Interface Print Method.");
    }
}
class Program
{
    public static void Main()
    {
        Customer C1 = new Customer();
        C1.Print();
        Console.ReadKey();
    }
}
------------------------------------------------------
Solution 59
interface ICustomer1
{
    void Print1();
}
interface ICustomer2 : ICustomer1
{
    void Print2();
}
public class Customer : ICustomer2
{
    public void Print1()
    {
        Console.WriteLine("Print1 Method of ICustomer1");
    }
    public void Print2()
    {
        Console.WriteLine("Print2 Method of ICustomer2");
    }
}
class Program
{
    public static void Main()
    {
        Customer C1 = new Customer();
        C1.Print1();
        C1.Print2();

        ICustomer1 C2 = new Customer();
        C2.Print1();

        Console.ReadKey();

    }
}
-----------------------------------------
Solution 60
using System;
interface I1
{
    void InterfaceMethod();
}
interface I2
{
    void InterfaceMethod();
}
public class Program:I1,I2
{
     void I1.InterfaceMethod()
    {
        Console.WriteLine("I1 Interface Method Implementation");
    }
    void I2.InterfaceMethod()
    {
        Console.WriteLine("I2 Interface Method Implementation");
    }

    public static void Main()
    {
        Program P = new Program();
        ((I1)P).InterfaceMethod();
        ((I2)P).InterfaceMethod();

        I1 I1 = new Program();
        I1.InterfaceMethod();
        I1 I2 = new Program();
        I2.InterfaceMethod();

        Console.ReadKey();
    }
}
-----------------------------------------
Solution 61
using System;
interface I1
{
    void InterfaceMethod();
}
interface I2
{
    void InterfaceMethod();
}
public class Program:I1,I2
{
    public void InterfaceMethod()
    {
        Console.WriteLine("I1 Interface Method Implementation");
    }
    void I2.InterfaceMethod()
    {
        Console.WriteLine("I2 Interface Method Implementation");
    }

    public static void Main()
    {
        Program P = new Program();
        P.InterfaceMethod();

        Console.ReadKey();
    }
}
--------------------------------------
Solution 62
using System;
public abstract class Customer
{
    public abstract void Print();
}

public class Program : Customer
{
    public override void Print()
    {
        Console.WriteLine("Abstract Class Print Method.");
    }
    public static void Main()
    {
        Program P = new Program();
        P.Print();

        Customer C = new Program();
        C.Print();
        Console.ReadKey();
    }
}
----------------------------------------
Solution 63
using System;
public abstract class Customer
{
    public void Print()
    {
        Console.WriteLine("Abstract Class Print Method.");
    }
}

public class Program : Customer
{
    public static void Main()
    {
        Program P = new Program();
        P.Print();
        Console.ReadKey();
    }
}
--------------------------------
Solution 64
using System;
class A
{
    public virtual void Print()
    {
        Console.WriteLine("Class A Implementation");
    }
}
class B : A
{
    public override void Print()
    {
        Console.WriteLine("Class B Overriding Print() Method");
    }
}
class C : A
{
    public override void Print()
    {
        Console.WriteLine("Class C Overriding Print() Method");
    }
}
//class D : B , C we want but is not possible
class D : B
{

}
class Program
{
    public static void Main()
    {
        D d = new D();
        d.Print();
        Console.ReadKey();
    }
}

------------------------------------
Solution 65
using System;

interface IA
{
    void PrintA();
}
class A:IA
{
    public void PrintA()
    {
        Console.WriteLine("Class A Print Method");
    }
}
interface IB
{
    void PrintB();
}
class B : IB
{
    public void PrintB()
    {
        Console.WriteLine("Class B Print Method");
    }
}
class AB : IA,IB
{
    A a = new A();
    B b = new B();
    public void PrintA()
    {
        a.PrintA();
    }
    public void PrintB()
    {
        b.PrintB();
    }
}

class Program
{
    public static void Main()
    {
        AB ab = new AB();
        ab.PrintA();
        ab.PrintB();
        Console.ReadKey();
    }
}
-----------------------------
Solution 66
using System;

class Program
{
    public delegate void HelloFunctionDelegate(string Message);
    public static void Hello(string strMessage)
    {
        Console.WriteLine(strMessage);
    }

    public static void Main()
    {
        HelloFunctionDelegate del = new HelloFunctionDelegate(Hello);
        del("Hello from delegate");
        Console.ReadKey();
    }
}
--------------------------------
Solution 67
using System;
using System.Collections.Generic;

public class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }
    public int Experience { get; set; }

    public static void PromotedEmployee(List<Employee> employeesList)
    {
        foreach (Employee employee in employeesList)
        {
            if (employee.Experience >= 5)
            {
                Console.WriteLine(employee.Name + " promoted");
            }
        }
    }
}
public class Program
{
    public static void Main()
    {
        List<Employee> empList = new List<Employee>();
        empList.Add(new Employee() { ID = 101, Name = "Mary", Salary = 5000, Experience = 5 });
        empList.Add(new Employee() { ID = 102, Name = "Mike", Salary = 4000, Experience = 4 });
        empList.Add(new Employee() { ID = 104, Name = "John", Salary = 6000, Experience = 6 });
        empList.Add(new Employee() { ID = 105, Name = "Todd", Salary = 3000, Experience = 3 });

        Employee.PromotedEmployee(empList);
        Console.ReadKey();        
    }
}
----------------------------------------
Solution 68
using System;
using System.Collections.Generic;

public delegate bool IsPromotable(Employee emp);
public class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }
    public int Experience { get; set; }

    public static void PromotedEmployee(List<Employee> employeesList, IsPromotable isPromotable)
    {
        foreach (Employee employee in employeesList)
        {
            if (isPromotable(employee))
            {
                Console.WriteLine(employee.Name + " promoted");
            }
        }
    }
}
public class Program
{
    public static void Main()
    {
        List<Employee> empList = new List<Employee>();
        empList.Add(new Employee() { ID = 101, Name = "Mary", Salary = 5000, Experience = 5 });
        empList.Add(new Employee() { ID = 102, Name = "Mike", Salary = 4000, Experience = 4 });
        empList.Add(new Employee() { ID = 104, Name = "John", Salary = 6000, Experience = 6 });
        empList.Add(new Employee() { ID = 105, Name = "Todd", Salary = 3000, Experience = 3 });


        IsPromotable promote = new IsPromotable(Promotable);
        Employee.PromotedEmployee(empList, promote);
        Console.ReadKey();        
    }
    public static bool Promotable(Employee emp)
    {
        if (emp.Experience >= 5)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}
-------------------------------------------------------
Solution 69
using System;
using System.Collections.Generic;

public delegate bool IsPromotable(Employee emp);
public class Employee
{
    public int ID { get; set; }
    public string Name { get; set; }
    public int Salary { get; set; }
    public int Experience { get; set; }

    public static void PromotedEmployee(List<Employee> employeesList, IsPromotable isPromotable)
    {
        foreach (Employee employee in employeesList)
        {
            if (isPromotable(employee))
            {
                Console.WriteLine(employee.Name + " promoted");
            }
        }
    }
}
public class Program
{
    public static void Main()
    {
        List<Employee> empList = new List<Employee>();
        empList.Add(new Employee() { ID = 101, Name = "Mary", Salary = 5000, Experience = 5 });
        empList.Add(new Employee() { ID = 102, Name = "Mike", Salary = 4000, Experience = 4 });
        empList.Add(new Employee() { ID = 104, Name = "John", Salary = 6000, Experience = 6 });
        empList.Add(new Employee() { ID = 105, Name = "Todd", Salary = 3000, Experience = 3 });
        
        Employee.PromotedEmployee(empList, emp => emp.Experience >= 5);
        Console.ReadKey();        
    }
}
----------------------------------------------
Solution 70
using System;

public delegate void SampleDelegate();
class Program
{
    public static void SampleMethodOne()
    {
        Console.WriteLine("Sample Method One");
    }
    public static void SampleMethodTwo()
    {
        Console.WriteLine("Sample Method Two");
    }
    public static void SampleMethodThree()
    {
        Console.WriteLine("Sample Method Three");
    }

    public static void Main()
    {
        SampleDelegate del1 = new SampleDelegate(SampleMethodOne);
        SampleDelegate del2 = new SampleDelegate(SampleMethodTwo);
        SampleDelegate del3 = new SampleDelegate(SampleMethodThree);
        SampleDelegate del = del1 + del2 + del3;
        del();
        Console.ReadKey();
    }
}
--------------------------------
Solution 71
using System;

public delegate void SampleDelegate();
class Program
{
    public static void SampleMethodOne()
    {
        Console.WriteLine("Sample Method One");
    }
    public static void SampleMethodTwo()
    {
        Console.WriteLine("Sample Method Two");
    }
    public static void SampleMethodThree()
    {
        Console.WriteLine("Sample Method Three");
    }

    public static void Main()
    {
        SampleDelegate del = new SampleDelegate(SampleMethodOne);
        del += SampleMethodTwo;
        del += SampleMethodThree;
        del();
        Console.ReadKey();
    }
}
---------------------------
Solution 72
using System;
class Program
{
    public delegate int SampleDelegate();
    public static void Main()
    {
        SampleDelegate del = new SampleDelegate(SampleMethodOne);
        del += SampleMethodTwo;
        int i = del();
        Console.WriteLine("The value of returned value is {0}.", i);
        Console.ReadKey();
    }

    public static int SampleMethodOne()
    {
        return 1;
    }
    public static int SampleMethodTwo()
    {
        return 2;
    }
}
----------------------------------------------
Solution 73
using System;
class Program
{
    public delegate void SampleDelegate(out int Integer);
    public static void Main()
    {
        SampleDelegate del = new SampleDelegate(SampleMethodOne);
        del += SampleMethodTwo;
        int DelegateOutputParamValue = -1;
        del(out DelegateOutputParamValue);
        Console.WriteLine("The value of returned value is {0}.", DelegateOutputParamValue);
        Console.ReadKey();
    }

    public static void SampleMethodOne(out int Number)
    {
        Number = 1;
    }
    public static void SampleMethodTwo(out int Number)
    {
        Number = 2;
    }
}
-----------------------------------------
Solution 74
using System;
public class Employee
{
    public string Name { get; set; }
    public int Gender { get; set; }
}
class Program
{
    public static void Main()
    {
        Employee[] employees = new Employee[3];
        employees[0] = new Employee { Name = "Tom", Gender = 1 };
        employees[1] = new Employee { Name = "Nancy", Gender = 2 };
        employees[2] = new Employee { Name = "Tony", Gender = 0 };

        foreach(Employee emp in employees)
        {
            Console.WriteLine("Employee Name is {0} && Gender is {1}", emp.Name,GetGender(emp.Gender));
        }
        Console.ReadKey();
    }

    public static string GetGender(int Gender)
    {
        switch (Gender)
        {
            case 1:
                return "Male";
            case 2:
                return "Female";
            case 0:
                return "Unknown";
            default:
                return "Invalid Gender";
        }
    }
}
------------------------------
Solution 75
using System;
public class Employee
{
    public string Name { get; set; }
    public Gender Gender { get; set; }
}
public enum Gender
{
    Male,
    Female,
    Unknown
}
class Program
{
    public static void Main()
    {
        Employee[] employees = new Employee[3];
        employees[0] = new Employee { Name = "Tom",Gender = Gender.Male };
        employees[1] = new Employee { Name = "Nancy", Gender = Gender.Female};
        employees[2] = new Employee { Name = "Tony", Gender = Gender.Unknown };

        foreach(Employee emp in employees)
        {
            Console.WriteLine("Employee Name is {0} && Gender is {1}", emp.Name,GetGender(emp.Gender));
        }
        Console.ReadKey();
    }

    public static string GetGender(Gender gender)
    {
        switch (gender)
        {
            case Gender.Male:
                return "Male";
            case Gender.Female:
                return "Female";
            case Gender.Unknown:
                return "Unknown";
            default:
                return "Invalid Gender";
        }
    }
}
-------------------------------
Solution 76
using System;
class Program
{
    public static void Main()
    {
        int[] Values=(int[])Enum.GetValues(typeof(Gender));

        foreach(int value in Values)
        {
            Console.WriteLine(value);
        }

        string[] Names = Enum.GetNames(typeof(Gender));
        foreach(string name in Names)
        {
            Console.WriteLine(name);
        }
        Console.ReadKey();
    }

    public enum Gender
    {
        Unknown,
        Male,
        Female
    }
}
-------------------------
Solution 77
using System;
class Program
{
    public static void Main()
    {
        short[] Values=(short[])Enum.GetValues(typeof(Gender));

        foreach(short value in Values)
        {
            Console.WriteLine(value);
        }
        Console.ReadKey();
    }

    public enum Gender:short
    {
        Unknown=5,
        Male=8,
        Female
    }
}
------------------------------------
Solution 78
using System;
class Customer
{
    private string _firstName;
    private string _lastName;

    public string FirstName
    {
        get{ return this._firstName; }
        set{ this._firstName = value; }
    }
    public string LastName {
        get { return this._lastName; }
        set { this._lastName = value; }
    }
    public void PrintFullName()
    {
        Console.WriteLine("Your fullname is {0} {1}", this._firstName, this._lastName);
    }
}
class Program
{
    public static void Main()
    {
        Customer C1 = new Customer();
        C1.FirstName = "Kumar";
        C1.LastName = "Saurav";
        C1.PrintFullName();
        Console.ReadKey();
    }
}
---------------------------------
Solution 79
using System;
class Customer
{
    #region Fields
    private string _firstName;
    private string _lastName;
    #endregion

    #region Properties
    public string FirstName
    {
        get{ return this._firstName; }
        set{ this._firstName = value; }
    }
    public string LastName {
        get { return this._lastName; }
        set { this._lastName = value; }
    }
    #endregion

    #region Methods
    public void PrintFullName()
    {
        Console.WriteLine("Your fullname is {0} {1}", this._firstName, this._lastName);
    }
    #endregion
}
class Program
{
    #region Main Method
    public static void Main()
    {
        Customer C1 = new Customer();
        C1.FirstName = "Kumar";
        C1.LastName = "Saurav";
        C1.PrintFullName();
        Console.ReadKey();
    }
    #endregion
}
------------------------------
Solution 80
using System;
class Customer
{
    protected int Id;
}
class CorporateCustomer:Customer
{
    public void Print()
    {
        Id = 101;
        Console.WriteLine("Id is {0}.", Id);
    }
}
class Program
{
    public static void Main()
    {
        CorporateCustomer CC = new CorporateCustomer();
        CC.Print();
        Console.ReadKey();
    }
}
----------------------------
