#Ref Video 1-5
- Namespace 
    - namespace can be used with using keyword like using System;
    - used to organise our code.
    - collection of classes, interfaces, structs, enums and delegates.

- Main Method
    - entry point into the application

- We can write to console using two ways
    - Concatination
    - Placeholder syntax

- Built-types
    Boolean type 
        - only true and false
    
    Integral types
        - sbyte     -128 to 127
        - byte      0 to 255
        - char      U+000 to U+ffff
        - short     -32768 to 32767
        - ushort    0 to 65535
        - int       -2147483648 to 2147483647
        - uint      0 to 4294967295
        - long      -9.223.372036854775808 to 9.223.372036854775807
        - ulong     0 to 18446744073709551615

    Floating types
        - float and double

    Decimal types

    String types
        - Escape Sequence -> We can ignore one character by just putting a \(back slash) before it.
        - Verbatin literal -> We can ignore all the escape sequence in a string by putting a @ before the string.

---------------------------
#Ref Video 6
    C# Types
    - Value Types - int float double structs enums etc
    - Reference Types - Interfaces Class Deligates Arrays etc.

    - By default Value types are non nullable .
        To make it nullable use int? j=0
        eg: string Name=null; (will work fine)
            int i=null; (will give an error as it is value type.)

    - Null Coalescing Operator ??
        When we want a value to be assigned for null value then we use this operator.

-------------------------------
#Ref Video 7
    Explicit Conversion
        - may result in loss of some data 
        - difference b/n using (int) & Convert.ToInt32 is that Convert.ToInt32 will throw an error when we want to store a large float value into integer 
            wheresas (int) will not ant returns the MinValue of integer.

    Parse and TryParse
        - Parse will directly try to parse a string into int and if the string doesnt contain a valid int value then it will throw an error
        - TryParse will check the string if it is a valid int , then only it will be sored to a variable
            eg: int.TryParse(strNumber,out Result)

---------------------------------
#Ref Video 8
    Arrays
        - Collection of similar data types.
        - Advantage - Arrays are strongly typed.
        - Disadvantage - Can not grow in size once initialized , have to rely on Integral indices to store and retrieve items from array.

----------------------------------
#Ref Video 9 
    Comments
        Single Line -> //
        Multiline -> /* */
        XML documentation -> ///
    Keyboard Shortcut
        Ctrl + K , Ctrl + C 
        Ctrl + K , Ctrl + U 
-----------------------------------
#Ref Video 10
    Difference b/n | and ||
        - if(UserNumber==10 || UserNumber==20)
        - In single or | if the first condition is true then there is no need to check the other but still it checks.
          In double or || if the first condition is false then only it will check the other 
    Difference b/n & and &&
        - if(UserNumber==10 && UserNumber==20)
        - In single and & if the first condition is false still it checks the second.
          In double and && if the first condition is false it will not check the other .

-------------------------------------
#Ref Video 11
    Switch 
        - used to switch to multiple cases.
    break
        - if break statement is used inside a switch statemen , the constrol will leave the switch statement.
            so we dont use break after a goto statement.
    goto
        - we can either jump to another case statement or to specific Label.
    
    Note: Using goto is bad programming style. We should avoid goto by all means.

----------------------------------------
#Ref Video 12
    Loops in c#
        - While loop -> checks the condition first. If true, statement in the loop get executed.
        - do while loop ->checks it condition at the end of the loop . 
            It means it guranteed to execute at least one time.
            used to present a menu to the user.

    Difference b/n while and do while
        - While checks the condition at the beginning , whereas do while checks at the end of loop.
        - guranteed to execute atleast once wheresas while not.

    while v/s for loop
        - In while loop we do initialization at one place, condition check at another and modification at another place
         whereas for loop has all these at one place.
            
    Foreach 
        - used to itirate through a collection(arraylist,hashtable,generics).    

------------------------
#Ref Video 16
    - Methods
        - Allows us to define logic once and use it at many places
        - make maintainence of application easier
    - Difference b/n static and instance method
        - Instance method -> multiple instance of the class can be created and each instance has its own seperate method.
        - Static method -> No instance of that method and we can invoke only one defination of static method.

#Ref Video 17
    - 4 Different Types of Method Parameters 
        1. Value Parameters -> creates a copy of the parameter passed , so modification does not affect each other.
        2. Reference Parameters -> ref keyword on a method parameter causes a method to refer to the same variable that was passed into the method. 
            Any changes made to the parameter in the method will be reflected in that variable when control passes back to the calling method.
        3. Out Parameters -> used when we want a method to return more than one value.
        4. Parameter Array -> The params keyword lets us specify a method parameter that takes a variable number of arguments.
            We can send a comma seperated list of arguments, or an array or no arguments .
            params keyword should be the last one in a method declaration and only one params keyword is permitted in a method declaration.

---------------------------
#Ref Video 18
    Why Namespaces?
    - used to organise our program.
    - provide assistance in avoiding name clashes.
    
    - Namespaces dont correspond to file, directory or assembly names. 
        They could be written in seperate files and/or seperate assemblies and still belong to same namespace.
    - A namespace can contain
        - another namespace
        - class
        - interfaces
        - structs
        - enums
        - delegates

-----------------------------
#Ref Video 19
    Class
        - There are simple datatypes like int , float, double etc.
            If we want to create complex types, we can make use of classes.
        - A class consist of data and behavior
            Data - represented by its fields.
            Behavior - represented by its methods.

    Constructor 
        - Initializes class fields
        - Automatically called when an instance of class is created.
        - do not have return type and always have same name as that of the class.
        - is not mandatory, if not provided a default parameterless constructor is automatically provided.
        - can be overloaded by number and type of parameters.  

    Destructor 
        - same name as that of class with ~ symbol infront of them.
        - dont take any parameter and do not return a value.
        - are placed where you could put code to release any resources your class was holding during its lifetime.
        
--------------------------------
#Ref Video 20
    Static vs instance members.
        - Static members are invoked using class names whereas instance members are invoked using instances(objects) of a class
        - Instance members belongs to specific instance of a class . If we create 3 objects of a class, I will have three sets of instance members in memory.

        - "this" refers to instance field of a class. If we make the field static then "this" will not work ,instead we have to initialize the field using the class name.(class.staticField and not this.staticField)

        - Class members - fields, methods, properties, events, indexers, constructors.

    Static Constructor
        - used to initialize static fields in a class
        - use static keyword to make a constructor static.
        - called only once , no matter how many instance we create.
        - called before instance constructors.

--------------------------------------
#Ref Video 21,22,23,24,25,26,27
    Pillars of object oriented programming
    1. Inheritance
    2. Encapsulation 
    3. Abstraction
    4. Polymorphism

    Inheritance
    It allows code reuse which can reduce time and errors.
    We will specify all the common fields, properties, methods in the base class which allows reusability .
        In derived class we will have only fields, properties, methods, that are specific to them.
        
    Inheritance syntax
    - C# only supports single class inheritance, not multiple although it supports multilevel inheritance.
    - C# supports multiple interface inheritance.
    - Child class is a specialization of base class
    - Base class are automatically instatiated before derived class.
    - Parent class constructor executes before ChildClass constructor.

    Inheritance concept
    - Use the new keyword to hide a base Class member, we will get a compiler warning if we miss the new keyword
    - Different ways to invoke a hidden base class member from derived class.
        - use base keyword { base.PrintFullName }
        - cast child type to parent type and invoke the hidden method { ((Employee)PTE).PrintFullName(); }
        - ParentClass PC=new ChildClass();
            PC.PrintFullName();
    
    Polymorphism 
    - allows us to invoke derived class methods through a base class reference during runtime.
    - in base class the method is declared virtual and in derived class we ovveride the same method.
    - virtual keyword indicates the method can be overridden in any derived class.

    Method Overriding vs Method Hiding
    - In Method Overriding a BaseClass reference variable pointing to a child class object will invoke the overridden method in the ChildClass
    - In method hiding a BaseClass reference variable pointing to a child class object will invoke the hidden method in the BaseClass.

    Method Overloading
    - allows a class to have multiple methods with same name but different signature.
    - overloading can be based on the number, types(int, char, float etc.) and kind(value, ref, out) of parameter.
    - signature of a method does not include in the return type and the params modifier.
        So it is not possible to overload a function just based on the return type or params modifier.

    Why Properties
    - Marking a class fields public and exposing it to the external world is bad, as we will not have control 
        over what get assigned and returned.
    - Problem with public fields.
        - Id should always be non negative number.
        - Name can not be set to null.
        - If Name is missing "No Name" should be returned.
        - PassMarks should be read only.
    - Programming Languages that does not have properties use getter and setter methods to encapsulate and protect fields.

--------------------------------------
#Ref Video 28,29,30
    Structs
    - Just like classes structs can have
        - Private Fields 
        - Public Properties
        - Constructor
        - Methods

    Difference Between Classes & Structs
    - Struct is value type whereas Class is a reference type.
    - Struct can be stored in stack whereas Class in heap
    - Value type hold their values in memory where they are declared, but reference types hold a reference to an object in memory.
    - Value types are destroyed immidietely after the scope is lost, whereas for reference types only the reference variable is destroyed after scope is lost;
         the real object is later destroyed by garbage collector.
    - When we copy a struct into another struct, a new copy of struct gets created and modification on one struct will not affect the values contained by other struct.
        When we copy a class into another class, we only get a copy of reference variable. Both the reference variables point to same object on the heap.
        So,operation on one variable will affect the values contained by the other reference variable.

    - Structs cant have destructors but classes have.
    - Structs can not have Explicit parameter less constructor whereas classes have.
    - Structs cant inherited from another class whereas class can.
    - Both classes and struct can inherit from interfaces.
    - eg: int(System.Int32), double(System.Double) etc.
    - Structs are sealed types.

    Interfaces
    - Just like classes interfaces also contains properties, methods, delegates or events but only declaration no implementation.
    - Interface members are public by default and they dont allow explicit access modifiers.
    - Interface do not contain fields.
    - If class/struct inherits from an interface it must provide implementation for all interface members otherwise we get compiler error.
    - A class/struct can inherit from more than one interface at the same time, whereas classes dont.
    - Interface can inherit from other interfaces. A class that inherits that interface must provide implementation for all interface members in the entire interface inheritance chain.
    - We can not create an instance of an interface but an interface reference variable can point to a derived class object.
    
    Explicit Interface implementation
    Question : A class inherits from 2 interfaces and both the interfaces have the same method name. How should the class implements the method for both the interfaces?
    Solution : Explicit Interface Implimentation
        When a class explicitly implements an interface member, the interface member can no longer be accessed through the class reference variable, but only through the interface reference variables.

    If we want to make one of interface method default, then implement that normally and  the other interface method explicitly.
    This makes the default method to be accessible through class instance.

------------------------------------------
#Ref Video 32
    Abstract Classes
    - An abstract class is incomplete and hence can not be instantiated.
    - can only be used as base class
    - can not be sealed
    - may contain abstract members(methods, indexers,events) but not mandatory.
    - a non-abstract class derived from an abstract class must provide implementation for all inherited abstract members.

    If a class inherits an Abstract class , there are two options availabe for that class..
    Option 1. provide implementation for all its abstract members.
    Option 2. that class has also has to be marked as abstract

    Abstract Classes vs interfaces
    - Abstract class can have implementation for some of its members(methods) but interfaces cant have implementation for any of its members.
    - Interface cannot have fields whereas abstract class can have fields.
    - An interface can inherit from another interface only and cant inherit from an abstract class,
        whereas an abstract class can inherit from another abstract class or other interface.
    - A class can inherit from multiple interfaces at the same times, where as a class cannot inherit from multiple classes at the same time.
    - Abstract class member can have access modifiers whereas interface members can not have access modifiers.
    
----------------------------------
Ref Video 36
    Delegate
    - A delegate is a type safe function pointer. It holds a reference(pointer) to a function.
    - Type safe -> The signature of the delegate must match the signature of the function, the delegate points to.
    - Delegate is similar to class . we just create an instance of it, we have to pass the function name as parameter to delegate constructor and it is to this function the delegate will point to.
    - Delegate syntax look very similar to a method with a delegate keyword.

    Multicast Delegate
    - is a delegate that has references to more than one function. 
        When we invoke a multicast delegate, all the function the delegate is pointing to are invoked.
    - There are 2 approaches to create a multicast delegate. Depending on the approaches we use :-
        + or += to register a method to the delegate
        - or -= to unregister a method to the delegate
    - Note: A multicast delegate invokes the methods in the invocation list, in the same order in which they are added.
    - If the delegate has a return type other than void and if the delegate is a multicast delegate , only the value of 
        last invoked method will be returned . Along the same same line , if the delegate has an output parameter 
        the value of the output parameter, will be the value assigned to the last method.
    - Where do we use multicast delegate? 
        It makes implementation of observer design pattern very simple. Observer pattern is also called as publish/subscribe pattern.

----------------------------------
Skip Videos - 40, 41 , 42, 43, 44
----------------------------------
#Ref Video 45,46,47
    Enums
    - Enums are strongly typed constants.
    - If a program uses set of integral numbers , our program becomes less readable and maintainable. Here we generally use Enums.
    - Enums are strongly typed hence an explicit cast is needed to convert from enum type to integer type and vice versa. 
        Also an enum of one type can not be implicitly assigned to an enum of another type even though the underlying value of their members are same.
    - the default underlying type of an enum is int.
    - default value of first element is 0 and gets incremented by 1.
    - It is possible to customize  the underlying type and value.
    - Enums are value types.
    - enum -> used to create enumeration.
        Enum -> class which contains static GetValues() and GetNames()
-----------------------
#Ref Video 48,49,50
    Type & Type members
    -Types - Classes , structs, enums, interface, delegate are called types.
    -Type members - fields, properties, constructor, methods etc that reside in a type.

    -Types have 2 access modifiers -> public and internal
    -Type members have all 5 access modifiers -> public, private, protected, internal, protected internal

    Regions
    Using regions we can expand and collapse sections of our code either manually or using visual studio : Edit -> Outlining -> Toggle All Outlining

    Access Modifiers
    1. Private      2. Public       3.Protected
    4.Internal      5. Protected Internal

    Private - Private members are availabe only within the containing type.
    Public - Public members are available anywhere, no restrictions.
    Protected - Protected members are available within the containing type and the type that derive from the containing type.(base.Id,this.Id)
    Internal - Internal members are accessible anywhere in the containing assembly.
    Protected Internal - anywhere in the containing assembly and from within a derived class in any other assembly.

-----------------------------------------









     
    
    
         

    


